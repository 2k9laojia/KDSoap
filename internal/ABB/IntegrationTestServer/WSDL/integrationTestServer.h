// This file is generated by KDAB's kdwsdl2cpp from IntegrationTest.wsdl.
// All changes you do to this file will be lost.
#ifndef INTEGRATIONTESTSERVER_H
#define INTEGRATIONTESTSERVER_H

#include <QList>
#include <QSharedData>
#include <QString>
#include <KDDateTime.h>
#include <QObject>
#include <KDSoapServerObjectInterface.h>
#include <KDSoapClientInterface.h>

class KDSoapMessage;
class KDSoapPendingCallWatcher;
class KDSoapValue;
class TNS__NumberList;

class TNS__NumberList
{
public:
    void setNumber( const QList<int>& number );
    QList<int> number() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__NumberList();
    ~TNS__NumberList();

public:
    TNS__NumberList( const TNS__NumberList& );
    TNS__NumberList &operator=( const TNS__NumberList& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__StringList
{
public:
    void setString( const QList<QString>& string );
    QList<QString> string() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__StringList();
    ~TNS__StringList();

public:
    TNS__StringList( const TNS__StringList& );
    TNS__StringList &operator=( const TNS__StringList& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ContainerType
{
public:
    void setNumberList( const TNS__NumberList& numberList );
    TNS__NumberList numberList() const;
    void setDateTime( const KDDateTime& dateTime );
    KDDateTime dateTime() const;
    void setString( const QString& string );
    QString string() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ContainerType();
    ~TNS__ContainerType();

public:
    TNS__ContainerType( const TNS__ContainerType& );
    TNS__ContainerType &operator=( const TNS__ContainerType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class IntegrationTestServerBase : public QObject, public KDSoapServerObjectInterface
{
    Q_OBJECT

    Q_INTERFACES(KDSoapServerObjectInterface)

public:
    virtual int numberTransfer( int numberTransferRequest ) = 0;
    virtual QString stringTransfer( const QString& stringTransferRequest ) = 0;
    virtual TNS__NumberList listOfNumbers( const TNS__NumberList& listOfNumbersRequest ) = 0;
    virtual TNS__StringList listOfStrings( const TNS__StringList& listOfStringsRequest ) = 0;
    virtual TNS__ContainerType containerTransfer( const TNS__ContainerType& containerTransferRequest ) = 0;
    void processRequest( const KDSoapMessage &request, KDSoapMessage &response, const QByteArray& soapAction );

};

class IntegrationTest : public QObject
{
    Q_OBJECT

public:
    IntegrationTest( QObject* parent = 0 );
    ~IntegrationTest();
    /**
        Asks Qt to ignore ssl errors in https requests. Use this for testing
        only!
     */
    void ignoreSslErrors();
    /**
        Overwrite the end point defined in the .wsdl file, with another
        http/https URL.
     */
    void setEndPoint( const QString& endPoint );
    /**
        Overwrite the soap version defined in the .wsdl file, with another
        version.
        version can be KDSoapClientInterface::SOAP1_1 or
        KDSoapClientInterface::SOAP1_2
     */
    void setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion );
    /**
        Return the error from the last blocking call.
        Empty if no error.
     */
    QString lastError() const;
    /**
        Blocking call to NumberTransfer.
        Not recommended in a GUI thread.
     */
    int numberTransfer( int numberTransferRequest );
    /**
        Asynchronous call to NumberTransfer.
        Remember to connect to numberTransferDone and numberTransferError.
     */
    void asyncNumberTransfer( int numberTransferRequest );
    /**
        Blocking call to StringTransfer.
        Not recommended in a GUI thread.
     */
    QString stringTransfer( const QString& stringTransferRequest );
    /**
        Asynchronous call to StringTransfer.
        Remember to connect to stringTransferDone and stringTransferError.
     */
    void asyncStringTransfer( const QString& stringTransferRequest );
    /**
        Blocking call to ListOfNumbers.
        Not recommended in a GUI thread.
     */
    TNS__NumberList listOfNumbers( const TNS__NumberList& listOfNumbersRequest );
    /**
        Asynchronous call to ListOfNumbers.
        Remember to connect to listOfNumbersDone and listOfNumbersError.
     */
    void asyncListOfNumbers( const TNS__NumberList& listOfNumbersRequest );
    /**
        Blocking call to ListOfStrings.
        Not recommended in a GUI thread.
     */
    TNS__StringList listOfStrings( const TNS__StringList& listOfStringsRequest );
    /**
        Asynchronous call to ListOfStrings.
        Remember to connect to listOfStringsDone and listOfStringsError.
     */
    void asyncListOfStrings( const TNS__StringList& listOfStringsRequest );
    /**
        Blocking call to ContainerTransfer.
        Not recommended in a GUI thread.
     */
    TNS__ContainerType containerTransfer( const TNS__ContainerType& containerTransferRequest );
    /**
        Asynchronous call to ContainerTransfer.
        Remember to connect to containerTransferDone and
        containerTransferError.
     */
    void asyncContainerTransfer( const TNS__ContainerType& containerTransferRequest );

signals:
    /**
        This signal is emitted whenever the call to numberTransfer() succeeded.
     */
    void numberTransferDone( int numberTransferResponse );
    /**
        This signal is emitted whenever the call to numberTransfer() failed.
     */
    void numberTransferError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to stringTransfer() succeeded.
     */
    void stringTransferDone( const QString& stringTransferResponse );
    /**
        This signal is emitted whenever the call to stringTransfer() failed.
     */
    void stringTransferError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to listOfNumbers() succeeded.
     */
    void listOfNumbersDone( const TNS__NumberList& listOfNumbersResponse );
    /**
        This signal is emitted whenever the call to listOfNumbers() failed.
     */
    void listOfNumbersError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to listOfStrings() succeeded.
     */
    void listOfStringsDone( const TNS__StringList& listOfStringsResponse );
    /**
        This signal is emitted whenever the call to listOfStrings() failed.
     */
    void listOfStringsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to containerTransfer()
        succeeded.
     */
    void containerTransferDone( const TNS__ContainerType& containerTransferResponse );
    /**
        This signal is emitted whenever the call to containerTransfer() failed.
     */
    void containerTransferError( const KDSoapMessage& fault );

private:
    KDSoapClientInterface *clientInterface();

private slots:
    void _kd_slotNumberTransferFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotStringTransferFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotListOfNumbersFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotListOfStringsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotContainerTransferFinished( KDSoapPendingCallWatcher* watcher );

private:
    class PrivateDPtr;
    PrivateDPtr *d_ptr;
};

#endif
