project(KDSoap)
cmake_minimum_required(VERSION 2.8)

set(${PROJECT_NAME}_VERSION_MAJOR 1)
set(${PROJECT_NAME}_VERSION_MINOR 0)
set(${PROJECT_NAME}_VERSION_PATCH 0)
set(${PROJECT_NAME}_VERSION ${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_PATCH})

find_package(Qt4 4.7 QUIET REQUIRED QtCore QtMain QtGui)

set(CMAKE_INCLUDE_CURRENT_DIR TRUE)

function(qt4_generate_moc_cpp)
	set(HEADERS ${ARGV})
	foreach(HEADER ${HEADERS})
		get_filename_component(HEADER_PATH ${HEADER} PATH)
		if(HEADER_PATH)
			set(HEADER_PATH ${HEADER_PATH}/)
		endif()
		get_filename_component(HEADER_NAME_WE ${HEADER} NAME_WE)
		string(REPLACE "_p" "" HEADER_NAME_WE_WP ${HEADER_NAME_WE})
		set(CPP_SOURCE ${HEADER_PATH}${HEADER_NAME_WE_WP}.cpp)
		set(MOC_SOURCE ${CMAKE_CURRENT_BINARY_DIR}/moc_${HEADER_NAME_WE}.cpp)
		qt4_generate_moc(${HEADER} ${MOC_SOURCE})
		set_source_files_properties(${CPP_SOURCE} PROPERTIES OBJECT_DEPENDS ${MOC_SOURCE})
	endforeach()
endfunction()

if(${PROJECT_NAME}_STATIC)
	set(${PROJECT_NAME}_LIBRARY_MODE "STATIC")
else()
	set(${PROJECT_NAME}_LIBRARY_MODE "SHARED")
endif()

if(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
	if(CMAKE_BUILD_TYPE MATCHES "Release")
		add_definitions(-DNDEBUG)
	endif()

	if(NOT CMAKE_BUILD_TYPE)
		set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "" FORCE)
	endif()

	if(UNIX AND CMAKE_INSTALL_PREFIX MATCHES "/usr/local")
		set(CMAKE_INSTALL_PREFIX "/usr/local/KDAB/${PROJECT_NAME}-${${PROJECT_NAME}_VERSION}")
	elseif(WIN32)
		set(CMAKE_INSTALL_PREFIX "C:\\KDAB\\KDSoap-$$VERSION")
	endif()

	message(STATUS "Building ${PROJECT_NAME} ${${PROJECT_NAME}_VERSION} in ${CMAKE_BUILD_TYPE} mode")
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")

install(FILES LICENSE.GPL.txt LICENSE.US.txt LICENSE.txt README.txt kdsoap.pri kdwsdl2cpp.pri DESTINATION .)

add_subdirectory(src)
add_subdirectory(kdwsdl2cpp)
add_subdirectory(features)
if(${PROJECT_NAME}_TESTS)
	enable_testing()
	add_subdirectory(testtools)
	add_subdirectory(unittests)
endif()
add_subdirectory(examples)
